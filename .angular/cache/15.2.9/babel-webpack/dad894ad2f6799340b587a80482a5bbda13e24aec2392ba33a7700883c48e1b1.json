{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AddTokenInterceptor = class AddTokenInterceptor {\n  constructor(router, _errorService) {\n    this.router = router;\n    this._errorService = _errorService;\n  }\n  intercept(request, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n};\nAddTokenInterceptor = __decorate([Injectable()], AddTokenInterceptor);\nexport { AddTokenInterceptor };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAWnC,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAE9BC,YACUC,MAAa,EACbC,aAA0B;IAD1B,WAAM,GAAND,MAAM;IACN,kBAAa,GAAbC,aAAa;EACpB;EAEHC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAGF,KAAK,EAAC;MACPF,OAAO,GAACA,OAAO,CAACK,KAAK,CAAC;QAACC,UAAU,EAAC;UAACC,aAAa,EAAC,UAAUL,KAAK;QAAE;MAAC,CAAC,CAAC;;IAEvE,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;CACD;AAdYL,mBAAmB,eAD/BD,UAAU,EAAE,GACAC,mBAAmB,CAc/B;SAdYA,mBAAmB","names":["Injectable","AddTokenInterceptor","constructor","router","_errorService","intercept","request","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle"],"sourceRoot":"","sources":["E:\\Cursos\\Angular\\ipp01\\front01\\src\\app\\utils\\add-token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AddTokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private router:Router,\n    private _errorService:ErrorService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token=localStorage.getItem('token');\n    if(token){\n      request=request.clone({setHeaders:{Authorization:`Bearer ${token}`}});\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}